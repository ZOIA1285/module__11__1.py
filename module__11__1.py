import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

# requests - запросить данные с сайта и вывести их в консоль
# Python Requests — это библиотека, позволяющая отправлять HTTP-запросы разного уровня сложности веб-сервисам и получать
# от них соответствующие ответы
response = requests.get('https://api.github.com/events')
print(response.text)

# pandas - считать данные из файла, выполнить простой анализ данных (на своё усмотрение) и вывести результаты в консоль
# Библиотека Pandas – мощный инструмент для анализа и обработки табличных данных. Pandas используется в инженерных,
# научных и финансовых вычислениях
# Метод pd.Series() создает одномерный массив Series из почти любых исходных данных
# На практике очень часто Series (и DataFrame, как мы увидим позже) создают из данных, представленных в csv файлах
# Из столбцов файла 'data.csv' можно сформировать Series:
dataframe = pd.read_csv('data.csv')
series_1 = dataframe['столбец_1']
series_2 = dataframe['столбец_2']
series_3 = dataframe['столбец_3']

print(series_1)
print(series_2)
print(series_3)

# numpy - создать массив чисел, выполнить математические операции с массивом и вывести результаты в консоль
# NumPy - библиотека Python, которая используется для выполнения вычислений и анализа данных. Она предоставляет объект
# многомерного массива, а также его разновидности, такие как маски и матрицы, которые можно использовать для различных
# математических операций.
# Чтобы создать массив в NumPy, можем использовать функцию np.array(). Эта функция принимает в качестве аргумента список
# или кортеж и возвращает массив NumPy. По умолчанию NumPy создает массивы типа float64. Можем указать другой тип данных
# с помощью параметра dtype. Например, чтобы создать одномерный массив целых чисел, воспользуемся следующим примером:
e = np.array([1, 2, 3, 4, 5], dtype=int)
# NumPy также предоставляет различные функции для выполнения математических операций над массивами, такие как np.sum(),
# np.mean(), np.std() и np.max().
sum_e = np.sum(e)# вычисляем сумму массива
mean_e = np.mean(e)# вычисляем среднее значение массива
std_dev_e = np.std(e)# вычисляем стандартное отклонение массива
max_e = np.max(e)# определяем максимальное значение массива
print(sum_e)
print(mean_e)
print(std_dev_e)
print(max_e)

# matplotlib - визуализировать данные с помощью библиотеки любым удобным для вас инструментом из библиотеки
# Matplotlib — это одна из самых популярных библиотек для визуализации данных в Python. Она позволяет создавать
# разнообразные графики и диаграммы, которые помогают лучше понять и интерпретировать данные
# В этом примере мы создаем линейный график с помощью функции plt.plot(), передавая ей два списка: x и y
# Данные для графика
x = [1, 2, 3, 4, 5]
y = [2, 3, 5, 7, 11]

# Создание графика
plt.plot(x, y)

# Отображение графика
plt.show()

# pillow - обработать изображение, например, изменить его размер, применить эффекты и сохранить в другой формат.
# Pillow является форком библиотеки Python Imaging Library (PIL). Это бесплатная библиотека с открытым исходным кодом
# для работы с изображениями и их обработки.Pillow поддерживает различные форматы файлов изображений, такие как .PNG,
# .JPEG, .PPM, .GIF, .TIFF и .BMP. С помощью этой библиотеки можно выполнять различные операции с изображениями, такие
# как обрезка, изменение размера, добавление текста, поворот, преобразование к оттенкам серого и многое другое.
# следует загрузить изображение, вызвав функцию Image.open(), которая возвращает объект Image
image = Image.open('girl.jpg')
# С помощью метода thumbnail() можно изменить размер изображения с сохранением соотношения сторон. При этом принимаются
# два значения, представляющие максимальную ширину и максимальную высоту миниатюр
image.thumbnail((200, 200))
image.rotate(90) # можно повернуть изображение с помощью метода rotate(). Он принимает число (целое или с плавающей
# точкой), представляющее градусы поворота, и возвращает новый объект Image с повернутым изображением. Поворот
# осуществляется против часовой стрелки.
image.save('girl_rotate_90_formatted.png')
